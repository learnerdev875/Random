{"version":3,"sources":["leadspace-blog.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAEI,yBACI,2BAAA,CAEJ,qBACI,gBAAA,CAEJ,6BACI,0CAAA,CAAA,kCAAA,CAMI,qCACI,mBAAA,CAAA,gBAAA,CC+CZ,wBD1CI,2BAEQ,wBAAA,CAAA,CCwCZ,wBDnCI,uCAEQ,iBAAA,CAAA,CCiCZ,yBDnCI,uCAKQ,iBAAA,CAAA,CC8BZ,wBD3BI,yCAEQ,gBAAA,CAAA,CCyBZ,yBD3BI,yCAKQ,kBAAA,CAAA,CAKR,gCACI,SAAA,CACA,iBAAA,CAEJ,gCACI,SAAA,CACA,iBAAA","file":"../leadspace-blog.min.css","sourcesContent":["@import '../common-imports';\r\n.leadspace-blog {\r\n    &__heading {\r\n        border-top: 0.8rem solid $space;\r\n    }\r\n    &_date {\r\n        font-size: 1.8rem;\r\n    }\r\n    &__description {\r\n        box-shadow: 0.8rem 0.8rem 0rem 0rem rgba(234, 239, 237, 1);\r\n        // @include box-shadow(8px 8px 0px 0px rgba(234, 239, 237, 1));\r\n        //mixin not working\r\n    }\r\n    &__image {\r\n        &-container {\r\n            img {\r\n                object-fit: cover;\r\n            }\r\n        }\r\n    }\r\n    .ratio {\r\n        &-4x3 {\r\n            @include media-breakpoint-up(md) {\r\n                --bs-aspect-ratio: 56.25%;\r\n            }\r\n        }\r\n    }\r\n    &__negativeMargin {\r\n        &--blogs {\r\n            @include media-breakpoint-up(md) {\r\n                margin-top: -10rem;\r\n            }\r\n            @include media-breakpoint-up(xl) {\r\n                margin-top: -20rem;\r\n            }\r\n        }\r\n        &--contact {\r\n            @include media-breakpoint-up(md) {\r\n                margin-top: -3rem;\r\n            }\r\n            @include media-breakpoint-up(xl) {\r\n                margin-top: -3.6rem;\r\n            }\r\n        }\r\n    }\r\n    &__z-index {\r\n        &--below {\r\n            z-index: 1;\r\n            position: relative;\r\n        }\r\n        &--above {\r\n            z-index: 2;\r\n            position: relative;\r\n        }\r\n    }\r\n}\r\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}